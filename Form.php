<?phpclass Json2Form{    // Stores all form inputs    private $inputs = array();    // Stores all form attributes    private $formAttr = array();    // Make sure a submit button is output    private $has_submit = false;    /**     * Constructor to set basic form attributes     * @param string $action     * @param array $args     */    function __construct($action = '', $args = null)    {        $defaults = array(            'action' => $action,            'method' => 'post',            'enctype' => 'application/x-www-form-urlencoded',            'class' => array(),            'id' => '',            'markup' => 'html',            'novalidate' => false,            'add_honeypot' => true,        );        if ($args) $settings = array_merge($defaults, $args);        else $settings = $defaults;        foreach ($settings as $key => $val) :            // Try setting with user-passed setting            // If not, try the default with the same key name            if (!$this->set_att($key, $val)) $this->set_att($key, $defaults[$key]);        endforeach;    }    /**     * Set attributes for the form and special fields     * @param $key     * @param $val     * @return bool     */    function set_att($key, $val)    {        switch ($key) :            case 'method':                if (!in_array($val, array('post', 'get'))) return false;                break;            case 'enctype':                if (!in_array($val, array('application/x-www-form-urlencoded', 'multipart/form-data'))) return false;                break;            case 'markup':                if (!in_array($val, array('html', 'xhtml'))) return false;                break;            case 'class':            case 'id':                if (!$this->_check_valid_attr($val)) return false;                break;            case 'novalidate':            case 'add_honeypot':                if (!is_bool($val)) return false;                break;            default:                return false;        endswitch;        $this->formAttr[$key] = $val;        return true;    }    /**     * Check $name for correct characters     * @param $string     * @return int     */    private function _check_valid_attr($string)    {        return preg_match('^[a-zA-Z0-9_-]*$', $string);    }    /**     * Add multiple inputs to the queue     * @param $arr     * @return bool     */    function add_inputs($arr)    {        if (!is_array($arr)) return false;        foreach ($arr as $field) :            $this->add_input($field[0], isset($field[1]) ? $field[1] : '', isset($field[2]) ? $field[2] : '');        endforeach;        return true;    }    /**     * Add an input to the queue     * @param $label     * @param string $args     * @param string $slug     */    function add_input($label, $args = '', $slug = '')    {        if (empty($args)) $args = array();        // Create slug        if (empty($slug)) $slug = Json2Form::_make_slug($label);        $defaults = array(            'type' => 'text',            'name' => $slug,            'id' => $slug,            'label' => $label,            'value' => '',            'placeholder' => '',            'class' => array(),            'min' => '',            'max' => '',            'step' => '',            'autofocus' => false,            'checked' => false,            'required' => false,            'add_label' => true,            'options' => array(),            'wrap_tag' => 'div',            'wrap_class' => array('form_field_wrap'),            'wrap_id' => '',            'wrap_style' => ''        );        // Combined defaults and arguments        // Arguments override defaults        $args = array_merge($defaults, $args);        $this->inputs[$slug] = $args;    }    /**     * Create a slug from a label name     * @param $string     * @return mixed|string     * @todo  Add validation for classes and ids     */    private static function _make_slug($string)    {        $result = preg_replace('!"|\'|_!', '', $string);        $result = preg_replace('~[\W\s]~', '-', $result);        $result = strtolower($result);        return $result;    }    /**     * Parse the inputs and build the form HTML     * @param bool $echo     * @return string     * @todo Make general refactoring     */    function build_form($echo = true)    {        $output = '		<form method="' . $this->formAttr['method'] . '"';        if (!empty($this->formAttr['enctype'])) $output .= ' enctype="' . $this->formAttr['enctype'] . '"';        if (!empty($this->formAttr['action'])) $output .= ' action="' . $this->formAttr['action'] . '"';        if (!empty($this->formAttr['id'])) $output .= ' id="' . $this->formAttr['id'] . '"';        if (count($this->formAttr['class']) > 0) $output .= Json2Form::_output_classes($this->formAttr['class']);        if ($this->formAttr['novalidate']) $output .= ' novalidate';        $output .= '>';        if ($this->formAttr['add_honeypot'])            $this->add_input('Leave blank to submit', array(                'name' => 'honeypot',                'slug' => 'honeypot',                'id' => 'form_honeypot',                'wrap_tag' => 'div',                'wrap_class' => array('form_field_wrap', 'hidden'),                'wrap_id' => '',                'wrap_style' => 'display: none'            ));        foreach ($this->inputs as $key => $val) :            $min_max_range = $element = $end = $attr = $field = $label_html = '';            // Set the field value to incoming            $val['value'] = isset($_REQUEST[$val['name']]) && !empty($_REQUEST[$val['name']]) ?                $_REQUEST[$val['name']] :                $val['value'];            switch ($val['type']) :                case 'title':                    $element = '';                    $end = '					<h3>' . $val['label'] . '</h3>';                    break;                case 'textarea':                    $element = 'textarea';                    $end = '>' . $val['value'] . '</textarea>';                    break;                case 'select':                    $element = 'select';                    $end = '>' . $this->_output_options_select($val['options']) . '					</select>';                    break;                case 'checkbox': //TODO check possible mistake                    if (count($val['options']) > 0) :                        $element = '';                        $end = $this->_output_options_checkbox($val['options'], $val['name']);                        $label_html = '<p class="checkbox_header">' . $val['label'] . '</p>';                        break;                    endif;                case 'radio':                    if (count($val['options']) > 0) :                        $element = '';                        $end = $this->_output_options_radios($val['options'], $val['name']);                        $label_html = '<p class="checkbox_header">' . $val['label'] . '</p>';                        break;                    endif;                case 'range':                case 'number':                    $min_max_range .= !empty($val['min']) ? ' min="' . $val['min'] . '"' : '';                    $min_max_range .= !empty($val['max']) ? ' max="' . $val['max'] . '"' : '';                    $min_max_range .= !empty($val['step']) ? ' step="' . $val['step'] . '"' : '';                case 'submit':                    $this->has_submit = true;                    break;                default :                    $element = 'input';                    $end .= ' type="' . $val['type'] . '" value="' . $val['value'] . '"';                    $end .= $val['checked'] ? ' selected' : '';                    $end .= $this->_get_field_close();                    break;            endswitch;            $id = !empty($val['id']) ? ' id="' . $val['id'] . '"' : '';            $class = count($val['class']) ? ' class="' . Json2Form::_output_classes($val['class']) . '"' : '';            $attr = $val['autofocus'] ? ' autofocus' : '';            $attr = $val['checked'] ? ' checked' : '';            $attr = $val['required'] ? ' required' : '';            // Build the label            if (!empty($label_html)) :                $field .= $label_html;            elseif ($val['add_label'] && $val['type'] != 'hidden' && $val['type'] != 'submit') :                $val['label'] .= $val['required'] ? ' <strong>*</strong>' : '';                $field .= '					<label for="' . $val['id'] . '">' . $val['label'] . '</label>';            endif;            if (!empty($element))                $field .= '					<' . $element . $id . ' name="' . $val['name'] . '"' . $min_max_range . $attr . $end;            else                $field .= $end;            // Parse and create wrap, if needed            if ($val['type'] != 'hidden' && !empty($val['wrap_tag'])) :                $wrap_before = '				<' . $val['wrap_tag'];                $wrap_before .= count($val['wrap_class']) > 0 ? Json2Form::_output_classes($val['wrap_class']) : '';                $wrap_before .= !empty($val['wrap_style']) ? ' style="' . $val['wrap_style'] . '"' : '';                $wrap_before .= !empty($val['wrap_id']) ? ' id="' . $val['wrap_id'] . '"' : '';                $wrap_before .= '>';                $wrap_after = '				</' . $val['wrap_tag'] . '>';                $output .= $wrap_before . $field . $wrap_after;            else :                $output .= $field;            endif;        endforeach;        //TODO Put out into external html template        if (!$this->has_submit) $output .= '				<div class="form_field_wrap">					<input type="submit" value="Submit" name="submit">				</div>';        $output .= '		</form>';        if ($echo) echo $output;        else return $output;    }    /**     * Parses and builds the classes in multiple places     * @param $arr     * @return string     */    private static function _output_classes($arr)    {        $output = implode(' ', $arr);        return "class='$output'";    }    /**     * Builds the select input output     * @param $arr     * @return string     */    private static function _output_options_select($arr)    {        $output = '';        foreach ($arr as $val => $opt) :            $output .= '						<option value="' . $val . '">' . $opt . '</option>';        endforeach;        return $output;    }    /**     * Builds the multiple checkbox output     * @param $arr     * @param $name     * @return string     */    private function _output_options_checkbox($arr, $name)    {        $output = '';        foreach ($arr as $val => $opt) :            $slug = Json2Form::_make_slug($opt);            $output .= '						<input type="checkbox" name="' . $name . '[]" value="' . $val . '" id="' . $slug . '"';            $output .= $this->formAttr['markup'] === 'xhtml' ? ' />' : '>';            $output .= '						<label for="' . $slug . '">' . $opt . '</label>';        endforeach;        return $output;    }    /**     * Builds the radio button output     * @param $arr     * @param $name     * @return string     */    private function _output_options_radios($arr, $name)    {        $output = '';        foreach ($arr as $val => $opt) :            $slug = Json2Form::_make_slug($opt);            $output .= '						<input type="radio" name="' . $name . '[]" value="' . $val . '" id="' . $slug . '"';            $output .= $this->formAttr['markup'] === 'xhtml' ? ' />' : '>';            $output .= '						<label for="' . $slug . '">' . $opt . '</label>';        endforeach;        return $output;    }    /**     * Easy way to auto-close fields, if necessary     */    function _get_field_close()    {        return $this->formAttr['markup'] === 'xhtml' ? ' />' : '>';    }}